bt_navigator:
  ros__parameters:
    use_sim_time: false
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml'
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch
    default_nav_to_pose_bt_xml: navigate_to_pose_w_replanning_and_recovery.xml
    default_nav_through_poses_bt_xml: navigate_through_poses_w_replanning_and_recovery.xml
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node
      - nav2_custom_bt

    # CustomBTNode 파라미터 추가
    custom_bt_escape_node:
      front_polygon_points: [0.5, 0.3, 0.5, -0.3, 0.2, -0.235, 0.2, 0.235]  # 기존 polygon_points를 front로 변경
      # footprint: "[ [0.31, 0.235], [0.31, -0.235], [-0.31, -0.235], [-0.31, 0.235] ]"
      # front_polygon_points: [1.5, 1.5, 1.5, -1.5, 0.0, -0.3, 0.0, 0.3]  # 후방 테스트용으로 전방범위를 확대
      back_polygon_points: [-0.5, 0.3, -0.5, -0.3, -0.2, -0.235, -0.2, 0.235]  # 후면 폴리곤 추가

      sensor_type: "pointcloud"  # "scan" 또는 "pointcloud"

      forward_distance: 0.5
      forward_speed: 0.2
      backward_distance: 0.5  # 후진 거리 추가
      backward_speed: 0.2    # 후진 속도 추가

      scan_topic: "/scan_dummy2"  # scan 토픽 이름 설정

      pointcloud_topic: "/livox/lidar"
      pointcloud_min_height: 0.2
      pointcloud_max_height: 0.5

    # 리커버리 관련 설정
    recovery_enabled: true
    # recovery_attempts: 10  # 5에서 10으로 증가
    # default_recovery_attempts: 3  # 3에서 5로 증가
    # max_recovery_attempts: 5  # 5에서 15로 증가
    
# CustomBTCollisionNode 파라미터 추가
custom_bt_collision_monitor:
  ros__parameters:
    sensor_type: "pointcloud"
    scan_topic: "/scan_dummy"
    pointcloud_topic: "/livox/lidar"
    pointcloud_min_height: 0.2  # 20cm
    pointcloud_max_height: 0.5  # 50cm
    slow_speed_ratio: 0.65  # slow zone에서의 속도 비율 (20%)
    slow_polygon_points: [0.8, 0.5, 0.8, -0.5, -0.8, -0.5, -0.8, 0.5]
    stop_polygon_points: [0.36, 0.285, 0.36, -0.285, -0.36, -0.285, -0.36, 0.285]
    
bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: false

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: false

controller_server:
    ros__parameters:
        controller_frequency: 10.0
        min_x_velocity_threshold: 0.001
        min_y_velocity_threshold: 0.5
        min_theta_velocity_threshold: 0.001
        failure_tolerance: 1.0
        progress_checker_plugins: ["progress_checker"]
        goal_checker_plugins: ["goal_checker"]
        controller_plugins: ["FollowPath"]
        use_realtime_priority: false
        odom_topic: /odometry

        # Progress checker parameters
        progress_checker:
            plugin: "nav2_controller::SimpleProgressChecker"
            required_movement_radius: 0.25
            movement_time_allowance: 10.0
        # Goal checker parameters
        goal_checker:
            stateful: True
            plugin: "nav2_controller::SimpleGoalChecker"
            xy_goal_tolerance: 0.15
            yaw_goal_tolerance: 0.15

        FollowPath:
            # combination of 2 local planners: rotation shim controller and MPPI controller
            #plugin: "nav2_rotation_shim_controller::RotationShimController"
            #primary_controller: "nav2_mppi_controller::MPPIController"

            # Rotation shim controller parameters
            # Backup controller for rotation in place when angular heading error is larger than threshold
            # https://navigation.ros.org/configuration/packages/configuring-rotation-shim-controller.html
            #angular_dist_threshold: 0.5 # (radians) threshold for switching to rotation in place
            #forward_sampling_distance: 0.5
            #rotate_to_heading_angular_vel: 1.0
            #max_angular_accel: 2.0
            #simulate_ahead_time: 3.0

            # MPPI Controller parameters: local planner (controller)
            # https://navigation.ros.org/configuration/packages/configuring-mppic.html
            plugin: "nav2_mppi_controller::MPPIController"
            # 회전 관련 파라미터 조정
            rotation_threshold: 1.0          # 회전 우선 임계값 (라디안)
            prefer_rotation_first: true      # 회전 우선 수행
            rotation_first_threshold: 1.5    # 회전 우선 각도 임계값
            
            # 기존 파라미터 조정
            time_steps: 50
            model_dt: 0.1
            wz_std: 0.6                     # 회전 표준편차 증가로 더 적극적인 회전 허용
            vx_max: 0.3
            vx_min: -0.3
            vy_max: 0.3
            wz_max: 0.4                     # 최대 회전 속도 증가

            iteration_count: 1
            temperature: 0.3
            gamma: 0.015
            visualize: False # True for debugging only (will degrade performance)
            retry_attempt_limit: 1
            regenerate_noises: false

            # trajectory visualization parameters (when visualize is true)
            TrajectoryVisualizer:
                trajectory_step: 20
                time_step: 5
            # path handler
            transform_tolerance: 0.1
            prune_distance: 1.5
            enforce_path_inversion: false
            inversion_xy_tolerance: 0.2
            inversion_yaw_tolerance: 0.4
            # Ackermann motion model used by MPPI controller in contrast to in-place rotation shim controller
            motion_model: "DiffDrive"
            AckermannConstraints:
                min_turning_r: 0.2
            critics: [
                    "ConstraintCritic", # penalizes trajectories that have components outside of the set dynamic or kinematic constraints
                    "ObstaclesCritic", # incentivizes navigating away from obstacles and critical collisions using either a circular robot point-check or full SE2 footprint check.
                    "GoalCritic", # incentivizes navigating spatially towards the goal when in reasonable proximity to goal
                    "PathAlignCritic", #incentivizes aligning with the global path, if relevant. It does not implement path following behavior.
                    "PathFollowCritic", # incentivizes making progress along the path. This is what drives the robot forward along the path.
                    "PathAngleCritic", # penalizes trajectories at a high relative angle to the path. This helps the robot make sharp turns when necessary due to large accumulated angular errors.
                    #"PreferForwardCritic", # incentivizes moving in the forward direction, rather than reversing.
                    "TwirlingCritic", # penalizes unnecessary 'twisting' with holonomic vehicles. It adds a constraint on the rotation angle to keep it consistent.
                    "GoalAngleCritic",          # 회전 관련 critic 우선순위 증가
                ]
            ConstraintCritic:
                enabled: true
                cost_power: 1
                cost_weight: 4.0
            GoalCritic:
                enabled: true
                cost_power: 1
                cost_weight: 20.0
                threshold_to_consider: 0.7
            GoalAngleCritic:
                enabled: true
                cost_power: 1
                cost_weight: 6.0            # 경로 각도 가중치 증가
                threshold_to_consider: 0.7
            PreferForwardCritic:
                enabled: false
                cost_power: 1
                cost_weight: 1.0
                threshold_to_consider: 0.7
            ObstaclesCritic:
                enabled: true
                cost_power: 1
                repulsion_weight: 1.4 # default 1.5
                critical_weight: 20.0
                consider_footprint: true
                collision_cost: 10000.0
                collision_margin_distance: 0.1
                near_goal_distance: 0.7
            PathAlignCritic:
                enabled: true
                cost_power: 1
                cost_weight: 20.0
                max_path_occupancy_ratio: 0.05
                trajectory_point_step: 3
                offset_from_furthest: 30
                use_path_orientations: true
                threshold_to_consider: 0.7
            PathFollowCritic:
                enabled: true
                cost_power: 1
                cost_weight: 4.0
                offset_from_furthest: 6
                threshold_to_consider: 0.7
            PathAngleCritic:
                enabled: true
                cost_power: 1
                cost_weight: 6.0            # 경로 각도 가중치 증가
                mode: 2
                offset_from_furthest: 2     # 참조점 거리 감소
                max_angle_to_furthest: 0.7
                threshold_to_consider: 0.7
            TwirlingCritic:
                enabled: true
                twirling_cost_power: 1
                twirling_cost_weight: 10.0


local_costmap:
  local_costmap:
    ros__parameters:
      transform_tolerance: 1.0
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: false
      rolling_window: true
      width: 7
      height: 7
      resolution: 0.05
      # robot_radius: 0.22
      footprint: "[ [0.31, 0.235], [0.31, -0.235], [-0.31, -0.235], [-0.31, 0.235] ]"
      plugins: ["obstacle_layer", "denoise_layer", "inflation_layer"]
      denoise_layer:
        plugin: "nav2_costmap_2d::DenoiseLayer"
        enabled: True

      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: true
        observation_sources: scan
        scan:
          topic: /livox/lidar
          max_obstacle_height: 1.7
          min_obstacle_height: 0.2
          clearing: true
          marking: true
          data_type: "PointCloud2"
          raytrace_max_range: 3.5
          raytrace_min_range: 0.0
          obstacle_max_range: 3.0
          obstacle_min_range: 0.05
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        # enabled: true
        inflation_radius: 0.9 # 0.9 #1.0 #0.55
        cost_scaling_factor: 7.0 # 13.0 #12.0 #3.0
        track_unknown_space: true

        # inflate_unknown: false
        # inflate_around_unknown: true
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: true
        map_topic: /rtabmap/map
        # enabled: true
        # subscribe_to_updates: true
        # transform_tolerance: 0.1
      always_send_full_costmap: true


global_costmap:
  global_costmap:
    ros__parameters:
      transform_tolerance: 1.0
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      # rolling_window: true
      use_sim_time: false
      # robot_radius: 0.22 #0.22
      footprint: "[ [0.31, 0.235], [0.31, -0.235], [-0.31, -0.235], [-0.31, 0.235] ]"
      resolution: 0.05
      #track_unknown_space: false
      # track_unknown_space: true

      plugins: ["static_layer", "obstacle_layer", "denoise_layer", "inflation_layer"]
      denoise_layer:
        plugin: "nav2_costmap_2d::DenoiseLayer"
        enabled: True
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: true
        observation_sources: scan
        scan:
          topic: /livox/lidar
          max_obstacle_height: 1.7
          min_obstacle_height: 0.2
          clearing: true
          marking: true
          data_type: "PointCloud2"
          raytrace_max_range: 3.5
          raytrace_min_range: 0.0
          obstacle_max_range: 3.0
          obstacle_min_range: 0.05
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: true
        map_topic: /rtabmap/map
        # enabled: true
        # subscribe_to_updates: true
        # transform_tolerance: 0.1
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        # enabled: true
        inflation_radius: 0.8
        cost_scaling_factor: 8.0
        track_unknown_space: true
        enabled: true
        inflate_unknown: false
        inflate_around_unknown: false
      always_send_full_costmap: true

map_server:
  ros__parameters:
    use_sim_time: false
    # Overridden in launch by the "map" launch
    # configuration or provided default value.
    # To use in yaml, remove the default "map" value in the
    # tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: ""

map_saver:
  ros__parameters:
    use_sim_time: false
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: true

planner_server:
    ros__parameters:
        expected_planner_frequency: 10.0
        planner_plugins: ["GridBased"]
        GridBased:
            plugin: "nav2_smac_planner/SmacPlannerHybrid"
            downsample_costmap: false # whether or not to downsample the map
            downsampling_factor: 1 # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
            tolerance: 0.25 # dist-to-goal heuristic cost (distance) for valid tolerance endpoints if exact goal cannot be found.
            allow_unknown: true # allow traveling in unknown space
            max_iterations: 1000000 # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
            max_on_approach_iterations: 1000 # Maximum number of iterations after within tolerances to continue to try to find exact solution
            max_planning_time: 10.0 # max time in s for planner to plan, smooth
            motion_model_for_search: "REEDS_SHEPP" # Hybrid-A* Dubin, Redds-Shepp
            angle_quantization_bins: 64 # Number of angle bins for search
            analytic_expansion_ratio: 3.5 # The ratio to attempt analytic expansions during search for final approach.
            analytic_expansion_max_length: 3.0 # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting
            minimum_turning_radius: 0.2 # minimum turning radius in m of path / vehicle
            reverse_penalty: 1.2 # Penalty to apply if motion is reversing, must be => 1
            change_penalty: 0.0 # Penalty to apply if motion is changing directions (L to R), must be >= 0
            non_straight_penalty: 1.2 # Penalty to apply if motion is non-straight, must be => 1
            cost_penalty: 2.0 # Penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
            retrospective_penalty: 0.015
            lookup_table_size: 20.0 # Size of the dubin/reeds-sheep distance window to cache, in meters.
            cache_obstacle_heuristic: false # Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
            debug_visualizations: false # For Hybrid nodes: Whether to publish expansions on the /expansions topic as an array of poses (the orientation has no meaning) and the path's footprints on the /planned_footprints topic. WARNING: heavy to compute and to display, for debug only as it degrades the performance.
            use_quadratic_cost_penalty: False
            downsample_obstacle_heuristic: True
            allow_primitive_interpolation: False
            smooth_path: True # If true, does a simple and quick smoothing post-processing to the path
            smoother:
                max_iterations: 100
                w_smooth: 0.3
                w_data: 0.2
                tolerance: 1.0e-10
                do_refinement: true
                refinement_num: 2

smoother_server:
  ros__parameters:
    use_sim_time: false
    costmap_topic: global_costmap/costmap_raw
    footprint_topic: global_costmap/published_footprint
    robot_base_frame: base_link
    transform_timeout: 0.1
    smoother_plugins: ["simple_smoother", "curvature_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: true
      w_smooth: 0.3    # 추가: 경로 스무딩 가중치
      w_data: 0.2      # 추가: 원본 경로 유지 가중치
    curvature_smoother:
      plugin: "nav2_smoother::SavitzkyGolaySmoother"

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["drive_on_heading", "assisted_teleop", "wait"]
    
    # spin과 backup은 사용하지 않음
    #spin:
    #  plugin: "nav2_behaviors/Spin"
    #backup:
    #  plugin: "nav2_behaviors/BackUp"
    
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
      wait_duration: 3.0  # 2.0에서 3.0으로 증가
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    
    global_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 0.1
    use_sim_time: false
    simulate_ahead_time: 2.0
    max_rotational_vel: 0.0 # 0.3
    min_rotational_vel: 0.0 # 0.0
    rotational_acc_lim: 0.0 # 0.5

robot_state_publisher:
  ros__parameters:
    use_sim_time: false

waypoint_follower:
  ros__parameters:
    use_sim_time: false
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: false
      waypoint_pause_duration: 0

velocity_smoother:
  ros__parameters:
    use_sim_time: false
    smoothing_frequency: 20.0
    scale_velocities: false
    feedback: "OPEN_LOOP"
    max_velocity: [0.5, 0.0, 1.0]
    min_velocity: [-0.5, 0.0, -1.0]
    max_accel: [1.0, 0.0, 0.5]
    max_decel: [-1.0, 0.0, -0.5]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0
